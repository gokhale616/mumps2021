select(.,
year, eta_a)
hacky_eta_a_imputation <- tibble(year = c(1995, 2015),
eta_a = c(0.9840213, 0.9991823))
eta_a_data <- (
eta_a_data %.>%
filter(.,
year %nin% c(1995, 2015)) %.>%
bind_rows(.,
hacky_eta_a_imputation)%.>%
arrange(.,
year) %.>%
slice(.,
rep(1, times = 67), 2:n()) %.>%
mutate(.,
year = seq(1910, 2018)) %.>%
mutate(.,
eta_a = ifelse(year < 1977, NA, eta_a))
)
# combine into one covar tibble
mumps_covariates <- demog_vacc_data %.>%
full_join(.,
eta_a_data, by = "year")
save(mumps_covariates, file = "../processed_data/mumps_covariates.rds")
polymod_UK_5 <- contact_matrix(survey = polymod, countries = "United Kingdom",
age.limits = c(0, 5, 15, 25, 40))
US_pop_2005 <- demog_data %.>%
filter(.,
Year == 2005) %.>%
select(.,
starts_with("N_")) %.>%
as.numeric(.)
#total number of contacts scaled to the population of the US
E_polymod_US <- matrix(NA, nrow = nrow(polymod_UK_5$matrix), ncol = ncol(polymod_UK_5$matrix))
for(i in 1:nrow(polymod_UK_5$matrix)) {
E_polymod_US[i, ] <- US_pop_2005[i]*polymod_UK_5$matrix[i,]}
dimnames(E_polymod_US) <- list(age_names, age_names)
#making the matrix symmtric:
Es_polymod_US <- 0.5*(E_polymod_US + t(E_polymod_US))
#Average daily contacts for US:
Cs_polymod_US_5 <- matrix(NA, nrow = nrow(polymod_UK_5$matrix), ncol = ncol(polymod_UK_5$matrix))
for(i in 1:nrow(polymod_UK_5$matrix)) {
Cs_polymod_US_5[i, ] <- 1/US_pop_2005[i]* Es_polymod_US[i,]}
dimnames(Cs_polymod_US_5) <- list(age_names, age_names)
contact_matrix <- Cs_polymod_US_5
save(contact_matrix, file = "../processed_data/contact_matrix.rds")
# load age_idependent data
non_cumulative_mumps <- read_csv(file = "../raw_data/tycho_20201118-150400.csv")
# select spatio-temporal information
mumps_by_states <- (
non_cumulative_mumps %.>%
transmute(.,
State = Admin1Name,
Date = PeriodEndDate,
PeriodLength = PeriodEndDate-PeriodStartDate,
Cases = CountValue)
)
# producing the a sequence of the state-year to generate missing values
n_states <- length(unique(mumps_by_states$State))
unique_states <- unique(mumps_by_states$State)
date_range <- c(min(mumps_by_states$Date), max(mumps_by_states$Date))
# producing the a sequence of the dates to generate missing values
complete_time_state_weekly <- tibble(Date = rep(seq.Date(from = date_range[1], to = date_range[2],
by = "week"), each = n_states),
State = rep(unique_states,
times = (difftime(date_range[2], date_range[1],
units = "weeks")+1)
)
) %.>%
mutate(.,
State = as.character(State))
# Form a data set with missing values but complete week-state records
complete_mumps_by_states_weekly <- complete_time_state_weekly %.>%
left_join(.,
mumps_by_states, by = c("Date", "State")) %.>%
mutate(.,
Year = format(Date, "%Y"),
Month = format(Date, "%m"),
Day = format(Date, "%d"),
State = str_to_title(State))
# function to distinguishing missing values from a zero sum
distinct_na_sum <- function(x) {
x_sum <- sum(x, na.rm = TRUE)
ifelse(x_sum == 0, NA, x_sum)
}
# summarize mumps cases by year-state
complete_mumps_by_states_annual <- complete_mumps_by_states_weekly %.>%
group_by(.,
Year, State) %.>%
summarise(.,
Cases = distinct_na_sum(Cases)) %.>%
ungroup(.) %.>%
mutate(.,
# Cases = ifelse(Cases == 0, NA, Cases),
Year = as.numeric(Year)
)
# summarize mumps by week (sum over all states)
complete_mumps_us_weekly <- complete_mumps_by_states_weekly %.>%
transmute(.,
Date, Cases) %.>%
group_by(., Date) %.>%
summarise(.,
Cases = distinct_na_sum(Cases)) %.>%
ungroup(.) %.>%
mutate(.,
DateDiff = Date - lag(Date))
# summarize mumps incidence by year (sum overl all states)
complete_mumps_us_annual <- complete_mumps_us_weekly %.>%
mutate(.,
Year = format(Date, "%Y")) %.>%
group_by(.,
Year) %.>%
summarise(.,
Cases = distinct_na_sum(Cases)) %.>%
ungroup(.) %.>%
mutate(.,
Year = as.numeric(Year)
)
if(FALSE) {
# plots stratified by states
complete_mumps_by_states_annual %.>%
ggplot(., aes(x = Year, y = Cases)) +
geom_line(size =  0.8) +
facet_wrap(.~State) +
project_theme +
theme()
complete_mumps_by_states_weekly %.>%
ggplot(., aes(x = Date, y = Cases)) +
geom_line(size = 0.6) +
scale_colour_manual(name = "", values = distinctColorPalette(56)) +
facet_wrap(.~State) +
project_theme
}
demog_by_states <- demog_data_1969_2017 %.>%
select(.,
year, state, population) %.>%
group_by(.,
year, state) %.>%
summarise(.,
population = sum(population, na.rm = TRUE)) %.>%
ungroup(.)
# pick the states' full names and abbreviation for seamless integration with the case data
# data-frame "statepop" is available after loading library "usmap"
state_names_abbr <- statepop %.>%
transmute(.,
state = abbr,
full = full)
length(state_names_abbr$state)
length(unique(demog_by_states$state))
unique(demog_by_states$state)[which(unique(demog_by_states$state) %nin% unique(state_names_abbr$state))]
# what state is missing a 2005 that must be KR?
state_KR <- demog_by_states %.>%
filter(., state == "KR")
correct_state_names <- state_names_abbr$state
funky_state <- sapply(correct_state_names, function(x) {
year_vec <- demog_by_states %.>%
filter(., state != "KR" & state == x) %.>%
select(., year) %.>%
unlist(.) %.>%
unname(.)
if(2005 %in% year_vec == TRUE) {
res <- "not it"
} else {
res <- "it"
}
res
}
)
which(funky_state == "it")
demog_by_states_clean <- demog_by_states %.>%
filter(.,
state != "KR") %.>%
left_join(.,
state_names_abbr,
by = "state") %.>%
transmute(.,
Year = year,
Abbr = state,
State = full,
Population = population)
# adding more information about the longitude and latitude
# some information about the map of us
us_states_long_lat <- us_map(region = "states") %.>%
transmute(.,
State = full, Abbr = abbr,
X = x, Y = y,
Group = group, Order = order, Piece = piece, Hole = hole, FIPS = fips)
unique(demog_by_states_clean$State)[unique(demog_by_states_clean$State)%nin%unique(us_states_long_lat$State)]
demog_by_states_annually <- demog_by_states_clean %.>%
left_join(.,
us_states_long_lat,
by = c("State", "Abbr"))
# which states present in the location data are not present in the incidence data?
state_to_filter <- unique(demog_by_states_annually$State)[unique(demog_by_states_annually$State) %nin%
unique(complete_mumps_by_states_annual$State)]
clean_demog_by_states_annually <- demog_by_states_annually %.>%
filter(., State != state_to_filter)
time_to_filter <- min(demog_by_states_annually$Year)
if(FALSE) {
# trim the weekly data for fitting and anlysis
mumps_inc_data_weekly <- complete_mumps_us_weekly %.>%
filter(.,
Date > ('1967-12-23')) %.>%
mutate(.,
# define a time variable embrace time period of the covariates
Year = ((as.numeric(difftime(Date, min(Date), units = "weeks"))-1)/52 + 1967)
)
# Only to be carried out if trajectory matching is going to be performed
# plot and and save incidence in the folder- prcessed data for further analysis
mumps_inc_data_weekly %.>%
filter(.,
Year > 1967) %.>%
ggplot(.,
aes(x = Date, y = sqrt(Cases)))+
labs(y = expression(sqrt(Cases)),
x = "Time (Weeks)")+
geom_line(size = 0.8) +
project_theme
save(mumps_inc_data_weekly, file = "../processed_data/mumps_inc_data_weekly.Rdata")
}
# load data from the mmwr tables to see if the data changes
path <- "../raw_data/mumps_curated_mmwr_tabs/"
use_path <- function(file) {
paste0(path, file)
}
data_2000_2004 <- (
"data_2000_2004.xlsx" %.>%
use_path(.) %.>%
read_xlsx(., na = "NA") %.>%
select(., 2:4)
)
data_2005_2007 <- (
"data_2005_2007.xlsx" %.>%
use_path(.) %.>%
read_xlsx(., na = "NA") %.>%
select(., 2:4)
)
data_2008_2009 <- (
"data_2008_2009.xlsx" %.>%
use_path(.) %.>%
read_xlsx(., na = "N") %.>%
select(., 2:4)
)
data_2010_2015 <- (
"data_2010_2015.xlsx" %.>%
use_path %.>%
read_xlsx(., na = "N") %.>%
select(., 2:4) %.>%
mutate(.,
reported_cases = as.numeric(reported_cases))
)
data_2017_2018 <- (
"data_2017_2018.xlsx" %.>%
use_path(.) %.>%
read_xlsx(., na = "N") %.>%
select(., 2:4) %.>%
mutate(.,
reported_cases = as.numeric(reported_cases))
)
# make a single dataframe
mumps_geography <- (
data_2000_2004 %.>%
rbind(., data_2005_2007) %.>%
rbind(., data_2008_2009) %.>%
rbind(., data_2010_2015) %.>%
rbind(., data_2017_2018)
)
clean_mmwr_table_data <- (
mumps_geography %.>%
mutate(.,
area = ifelse(area == "New York (upstate)", "New York (Upstate)", area)) %.>%
spread(., key = area, value = reported_cases) %.>%
# pivot_wider(., names_from = area, values_from = reported_cases, values_fn = mean) %.>%
mutate(.,
`New York` = `New York City` + `New York (Upstate)`) %.>%
select(., -c(`New York City`, `New York (Upstate)`)) %.>%
gather(., key = "area", value = "reported_cases", -c(year)) %.>%
filter(., area %in% state.name) %.>%
transmute(.,
Year = year,
State = area,
Cases = reported_cases) %.>%
arrange(., State)
)
# get rid of the tycho data after 2000 and use the mmwr data
complete_mumps_by_states_annual_clean <- (
complete_mumps_by_states_annual %.>%
filter(., Year < 2000) %.>%
bind_rows(., clean_mmwr_table_data) %.>%
arrange(., State)
)
# combine the data with the demography data to calculate the rate of incidence
mumps_demog_geog_annual <- (
complete_mumps_by_states_annual_clean %.>%
filter(.,
Year > time_to_filter-1) %.>%
left_join(.,
clean_demog_by_states_annually,
by = c("State", "Year")) %.>%
mutate(., Incidence = (Cases/Population)*1e5)
)
save(mumps_demog_geog_annual, file = "../processed_data/mumps_demog_geog_annual.rds")
rm(list = ls())
tic()
source("../00/src_preprocess.R", chdir = TRUE)
source("./mk_dir.R")
source("./case_report_data.R")
source("./demog_data_5ac.R")
source("./preprocess_tycho_data.R")
source("./preprocess_mumps_geog_tables.R")
toc()
source("../00/src.R", chdir = TRUE)
mumps_case_reports_l
mumps_case_reports_l <- (
mumps_case_reports %.>%
gather(., key = "age_cohort", value = "cases", -c(year, total), factor_key = TRUE) %.>%
mutate(.,
sqrt_cases = sqrt(cases),
sqrt_total = sqrt(total)
)
)
covars_for_case_conversion <- (
mumps_covariates %.>%
mutate(., total_pop = N_1 + N_2 + N_3 + N_4 + N_5) %.>%
filter(., year > 1975 & year < 2019) %.>%
select(., year, total_pop)
)
mumps_incidence_rate_l <- (
mumps_case_reports_l %.>%
filter(., age_cohort == "unknown") %.>%
select(., year, total) %.>%
right_join(.,
covars_for_case_conversion,
by = c("year")) %.>%
mutate(., ac_inc_rate = (total/total_pop)*1e5) %.>%
select(., -c(total, total_pop))
)
y_max_abs <- max(mumps_case_reports_l$sqrt_total, na.rm = TRUE)
abs_inc_plt <- (
mumps_case_reports_l %.>%
drop_na(.) %.>%
ggplot(.,
aes(x = year, y = sqrt_cases)) +
geom_line(aes(colour = age_cohort), size = 0.8, alpha = 0.95) +
# geom_area(aes(colour = age_cohort, fill = age_cohort),
#           position = position_dodge(), alpha = 0.3, size = 0.9) +
labs(y = expression(paste(sqrt(Cases), phantom(100))),
x = "") +
scale_x_continuous(#expand = c(0.000, 0.000),
breaks = gen_x_breaks) +
scale_y_continuous(#expand = c(0.0, 0),
breaks = (y_max_abs*c(0, 0.25, 0.5, 0.75, 1)) %.>% floor(.)) +
scale_colour_manual(values = age_cols) +
scale_fill_manual(values = age_cols) +
project_theme +
# theme(axis.text.x = element_blank()) +
cap_axes +
theme(axis.title = element_text(size = 8.5),
plot.margin = unit(rep(mar_val, 4), "cm"),
legend.position = "none"
)
)
abs_inc_plt
anno_data <- tibble(label = c("Initial\ndecline", "First\nresurgence", "Second\nresurgence", "", ""),
label_2 = "Sustained\ntransmission",
x_2 = 2013,
x = c(1981, 1987, 2006, 2009, 2016),
y = 8.5,
yend = 6)
anno_data_2 <- tibble(label = "Sustained\ntransmission",
x = 2012,
y = 8.5,
yend = 6)
inc_rate_plt <- (
mumps_incidence_rate_l %.>%
ggplot(.,
aes(x = year, y = ac_inc_rate)) +
geom_area(stat = "identity", alpha = 0.9, fill = "#EF629F", colour = "grey30") +
geom_segment(data = anno_data,
aes(x = x, xend = x, y = y, yend = yend),
arrow = arrow(length = unit(0.09, "npc")),
colour = "grey30") +
geom_segment(aes(x = 2008.95, xend = 2016.05, y = 8.49, yend = 8.49), colour = "grey30") +
geom_text(data = anno_data,
aes(label = label, x = x, y = y+1.65), colour = "grey30", size = 2) +
geom_text(data = anno_data_2,
aes(label = label, x = x, y = y+1.65), colour = "grey30", size = 2) +
labs(y = expression(paste(Cases~per~10^5, phantom(1000000))),
x = "") +
scale_x_continuous(#expand = c(0.000, 0.000),
breaks = gen_x_breaks) +
scale_y_continuous(breaks = c(0, 3, 6, 9, 12), limits = c(0, 12)) +
project_theme +
# theme(axis.text.x = element_blank()) +
cap_axes +
theme(axis.title = element_text(size = 8.5),
plot.margin = unit(rep(mar_val, 4), "cm"))
)
inc_rate_plt
prop_inc_plt <- (
mumps_case_reports_l %.>%
ggplot(.,
aes(x = year, y = cases, fill = age_cohort)) +
geom_area(stat = "identity", position = "fill") +
labs(x = "Year",
y = expression(paste(Percent~total, phantom(10000000))),
fill = "Age\nCohort") +
scale_fill_manual(values = age_cols) +
scale_x_continuous(#expand = c(0, 0),
breaks = gen_x_breaks) +
scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1),
labels = scales::percent_format(accuracy = 1)) +
project_theme +
cap_axes +
theme(axis.title = element_text(size = 8.5),
plot.margin = unit(rep(mar_val, 4), "cm"))
)
inc_legend <- prop_inc_plt %.>% get_legend(.)
prop_inc_plt <- prop_inc_plt + theme(legend.position = "none")
incidence_plt <- (
plot_grid(inc_rate_plt,
abs_inc_plt,
prop_inc_plt,
nrow = 3, labels = c("A", "B", "C"),
# rel_heights = c(1, 1),
align = "hv", axis = "b")
)
incidence_plt
# final incidence plot
incidence_w_legend_plt <- (
plot_grid(incidence_plt, inc_legend,
rel_heights = c(1, 0.1), nrow = 2)
)
incidence_w_legend_plt
# maps go here
map_mumps <- function(mumps_geog, fill_var = Incidence,
breaks) {
# browser()
# generate a quosure type variables
enquo_fill_var <- enquo(fill_var)
#browser()
# depends on the preprocess_tycho_data.R
mumps_geog %.>%
ggplot(.,
aes(x = X, y = Y, group = Group)) +
geom_polygon(aes(fill = !!enquo_fill_var)) +
geom_path(size = 0.06, colour = "grey30")+
labs(x = "", y = "",
fill = expression(Cases~per~10^5)) +
annotate(geom = "text", x = 0.4e6, y = 0.65e6,
label = mumps_geog$Year %.>% unique(.),
parse = TRUE, size = 3)+
scale_fill_gradient(low = "#F9D423", high = "#FF4E50", na.value = NA,
breaks = breaks,
limits = c(0, 10))+
project_theme +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
legend.position = c(0.72, 0.1),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
panel.grid = element_blank(),
plot.margin = unit(rep(mar_val, 4), "cm")) +
guides(fill = guide_colorbar(frame.colour = "black",
ticks.colour = "black",
title.position = "top",
direction = "horizontal",
barheight = 0.3)
)
}
set_map_data <- function(year_range) {
# browser()
len_v <- length(year_range)
mumps_demog_geog_annual %.>%
filter(., Year %in% year_range) %.>%
mutate(., Year = ifelse(len_v == 1,
year_range[1] %.>% as.character(.),
paste0(year_range[1], "-", year_range[len_v])
)
) %.>%
group_by(., Year, State) %.>%
mutate(., Incidence = mean(Incidence, na.rm = TRUE)) %.>%
ungroup(.)
}
mumps_demog_geog_annual_1985_89 <- (
set_map_data(year_range = c(1985:1989))
)
mumps_demog_geog_annual_1985_89
map_1985_89_plt <-  mumps_demog_geog_annual_1985_89 %.>%
map_mumps(., breaks = c(2, 4, 6, 8))
map_1985_89_plt
map_1985_89_plt <-  mumps_demog_geog_annual_1985_89 %.>%
map_mumps(., breaks = c(2, 4, 6, 8))
map_1985_89_plt
mumps_demog_geog_annual_2006_18 <- (
set_map_data(year_range = c(2000:2005))
)
mumps_demog_geog_annual_2006_18
map_2006_18_plt <-  mumps_demog_geog_annual_2006_18 %.>%
map_mumps(., breaks = c(2, 4, 6, 8))
map_2006_18_plt
mumps_demog_geog_annual_2006_18 <- (
set_map_data(year_range = c(2006:2018))
)
mumps_demog_geog_annual_2006_18
map_2006_18_plt <-  mumps_demog_geog_annual_2006_18 %.>%
map_mumps(., breaks = c(2, 4, 6, 8))
map_2006_18_plt
map_2006_18_plt <-  mumps_demog_geog_annual_2006_18 %.>%
map_mumps(., breaks = c(2, 4, 6, 8))
map_2006_18_plt
