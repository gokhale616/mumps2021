hacky_eta_a_imputation)%.>%
arrange(.,
year) %.>%
slice(.,
rep(1, times = 67), 2:n()) %.>%
mutate(.,
year = seq(1910, 2018)) %.>%
mutate(.,
eta_a = ifelse(year < 1977, NA, eta_a))
)
# combine into one covar tibble
mumps_covariates <- demog_vacc_data %>%
#select(-year) %>%
full_join(eta_a_data, by = "year")
mumps_covariates
# combine into one covar tibble
mumps_covariates <- demog_vacc_data %.>%
full_join(.,
eta_a_data, by = "year")
save(mumps_covariates, file = "../processed_data/mumps_covariates.rds")
polymod_UK_5 <- contact_matrix(survey = polymod, countries = "United Kingdom",
age.limits = c(0, 5, 15, 25, 40))
demog_data %>%
filter(Year == 2005) %>%
select(starts_with("N_")) %>%
as.numeric -> US_pop_2005
demog_data
demog_data %.>%
filter(.,
Year == 2005)
US_pop_2005 <- demog_data %.>%
filter(.,
Year == 2005) %.>%
select(.,
starts_with("N_")) %.>%
as.numeric(.)
US_pop_2005
#total number of contacts scaled to the population of the US
E_polymod_US <- matrix(NA, nrow = nrow(polymod_UK_5$matrix), ncol = ncol(polymod_UK_5$matrix))
for(i in 1:nrow(polymod_UK_5$matrix)) {
E_polymod_US[i, ] <- US_pop_2005[i]*polymod_UK_5$matrix[i,]}
dimnames(E_polymod_US) <- list(age_names_5, age_names_5)
dimnames(E_polymod_US) <- list(age_names, age_names)
#making the matrix symmtric:
Es_polymod_US <- 0.5*(E_polymod_US + t(E_polymod_US))
#Average daily contacts for US:
Cs_polymod_US_5 <- matrix(NA, nrow = nrow(polymod_UK_5$matrix), ncol = ncol(polymod_UK_5$matrix))
for(i in 1:nrow(polymod_UK_5$matrix)) {
Cs_polymod_US_5[i, ] <- 1/US_pop_2005[i]* Es_polymod_US[i,]}
dimnames(Cs_polymod_US_5) <- list(age_names_5, age_names_5)
contact_matrix <- Cs_polymod_US_5
save(contact_matrix, file = "../processed_data/contact_matrix.rds")
contact_matrix
rm(list = ls())
source('~/Documents/GitHub/mumps2021/process_raw_data/src_process_data.R', echo=TRUE)
source('~/Documents/GitHub/mumps2021/process_raw_data/src_process_data.R', echo=TRUE)
source('~/Documents/GitHub/mumps2021/process_raw_data/src_process_data.R', echo=TRUE)
source('~/Documents/GitHub/mumps2021/process_raw_data/case_report_data.R', echo=TRUE)
load(file = "../processed_data/mumps_case_reports.rds")
source("../00/src.R", chdir = TRUE)
source("./case_report_data.R")
dev.off()
rm(list = ls())
source("../00/src.R", chdir = TRUE)
source("./case_report_data.R")
source("./demog_data_5ac.R")
source('~/Documents/GitHub/mumps2021/process_raw_data/src_process_data.R', echo=TRUE)
source('~/Documents/GitHub/mumps2021/process_raw_data/src_process_data.R', echo=TRUE)
source("./demog_data_5ac.R")
rm(list = ls())
# load raw data
sheet_name <- excel_sheets("../raw_data/mumps_case_data.xlsx")
mumps_1977_1994 <- read_excel("../raw_data/mumps_case_data.xlsx", sheet = "Sheet1")
mumps_1995 <- read_excel("../raw_data/mumps_case_data.xlsx", sheet = "Sheet2")
mumps_1996_2018 <- read_excel("../raw_data/mumps_case_data.xlsx", sheet = "Sheet3")
mumps_1996_2018 %<>% na_if(1.1)
source('~/Documents/GitHub/mumps2021/process_raw_data/src_process_data.R', echo=TRUE)
source('~/Documents/GitHub/mumps2021/process_raw_data/src_process_data.R', echo=TRUE)
setwd("~/Documents/GitHub/mumps2021")
source('~/Documents/GitHub/mumps2021/0build.R', echo=TRUE)
setwd("~/Documents/GitHub/mumps2021/process_raw_data")
# laod serology data
read_csv("../raw_data/england_1987_mumps_serology_edmunds.csv",
col_types = cols_only(Age = col_double(),
prop_sero_pos = col_double())) -> sero_data
# correct ages
sero_data %>%
mutate(Age = seq(1, 39, by = 1)) %>%
add_row(Age = c(0, seq(40, 85)),
prop_sero_pos = c(rep(min(.$prop_sero_pos)),
rep(max(.$prop_sero_pos), length(seq(40, 85))))) %>%
arrange(Age) -> sero_data_age_correction
sero_data
# Use the demog data for all age classes for resetting seropoitive proportion into 5 age classes
wide_dd_1900_2017 %>%
filter(year < 1968) %>%
summarise_all(mean) %>%
select(-year) %>%
gather(key = "Age", value = "Population") -> mean_pop_prevac_US
rm(list = ls())
source('~/Documents/GitHub/mumps2021/process_raw_data/src_process_data.R', echo=TRUE)
# look at tycho data
non_cumulative_mumps <- read_csv(file = "../raw_data/tycho_20201118-150400.csv")
mumps_by_states <- non_cumulative_mumps %.>%
transmute(.,
State = Admin1Name,
Date = PeriodEndDate,
PeriodLength = PeriodEndDate-PeriodStartDate,
Cases = CountValue)
mumps_by_states
non_cumulative_mumps
# select spatio-temporal information
mumps_by_states <- (
non_cumulative_mumps %.>%
transmute(.,
State = Admin1Name,
Date = PeriodEndDate,
PeriodLength = PeriodEndDate-PeriodStartDate,
Cases = CountValue)
)
# producing the a sequence of the state-year to generate missing values
n_states <- length(unique(mumps_by_states$State))
unique_states <- unique(mumps_by_states$State)
date_range <- c(min(mumps_by_states$Date), max(mumps_by_states$Date))
# producing the a sequence of the dates to generate missing values
complete_time_state_weekly <- tibble(Date = rep(seq.Date(from = date_range[1], to = date_range[2],
by = "week"), each = n_states),
State = rep(unique_states,
times = (difftime(date_range[2], date_range[1],
units = "weeks")+1)
)
) %.>%
mutate(.,
State = as.character(State))
# Form a data set with missing values but complete week-state records
complete_mumps_by_states_weekly <- complete_time_state_weekly %.>%
left_join(.,
mumps_by_states, by = c("Date", "State")) %.>%
mutate(.,
Year = format(Date, "%Y"),
Month = format(Date, "%m"),
Day = format(Date, "%d"),
State = str_to_title(State))
complete_mumps_by_states_weekly
# function to distinguishing missing values from a zero sum
distinct_na_sum <- function(x) {
x_sum <- sum(x, na.rm = TRUE)
ifelse(x_sum == 0, NA, x_sum)
}
# summarize mumps cases by year-state
complete_mumps_by_states_annual <- complete_mumps_by_states_weekly %.>%
group_by(.,
Year, State) %.>%
summarise(.,
Cases = distinct_na_sum(Cases)) %.>%
ungroup(.) %.>%
mutate(.,
# Cases = ifelse(Cases == 0, NA, Cases),
Year = as.numeric(Year)
)
# summarize mumps by week (sum over all states)
complete_mumps_us_weekly <- complete_mumps_by_states_weekly %.>%
transmute(.,
Date, Cases) %.>%
group_by(., Date) %.>%
summarise(.,
Cases = distinct_na_sum(Cases)) %.>%
ungroup(.) %.>%
mutate(.,
DateDiff = Date - lag(Date))
# summarize mumps incidence by year (sum overl all states)
complete_mumps_us_annual <- complete_mumps_us_weekly %.>%
mutate(.,
Year = format(Date, "%Y")) %.>%
group_by(.,
Year) %.>%
summarise(.,
Cases = distinct_na_sum(Cases)) %.>%
ungroup(.) %.>%
mutate(.,
Year = as.numeric(Year)
)
demog_by_states <- demog_data_1969_2017 %.>%
select(.,
year, state, population) %.>%
group_by(.,
year, state) %.>%
summarise(.,
population = sum(population, na.rm = TRUE)) %.>%
ungroup(.)
# pick the states' full names and abrevation for seasmless integration with the case data
state_names_abbr <- statepop %.>%
transmute(.,
state = abbr,
full = full)
statepop
demog_by_states
state_names_abbr$state
data("statepop")
lib_dep <- c("tidyverse",
"pomp", "magrittr", "wrapr",
"readxl", "tictoc", "parallel", "subplex",
"LaplacesDemon", "cowplot",
"rootSolve", "GGally", "RColorBrewer",
"ggpubr", "reshape2",
"usmap",
"readxl", "socialmixr", "ggthemes",
"DEoptim", "doParallel", "doRNG", "xtable", "scales",
"parallel", "nloptr",
"lemon", "wesanderson")
sapply(lib_dep, require, character.only = TRUE)
statepop
# pick the states' full names and abbreviation for seamless integration with the case data
state_names_abbr <- statepop %.>%
transmute(.,
state = abbr,
full = full)
state_names_abbr
statepop
# pick the states' full names and abbreviation for seamless integration with the case data
# data-frame "statepop" is available after loading library "usmap"
state_names_abbr <- statepop %.>%
transmute(.,
state = abbr,
full = full)
state_names_abbr
length(state_names_abbr$state)
length(unique(demog_by_states$state))
unique(demog_by_states$state)[which(unique(demog_by_states$state) %nin% unique(state_names_abbr$state))]
# what state is missing a 2005 that must be KR?
state_KR <- demog_by_states %.>%
filter(., state == "KR")
correct_state_names <- state_names_abbr$state
funky_state <- sapply(correct_state_names, function(x) {
year_vec <- demog_by_states %.>%
filter(., state != "KR" & state == x) %.>%
select(., year) %.>%
unlist(.) %.>%
unname(.)
if(2005 %in% year_vec == TRUE) {
res <- "not it"
} else {
res <- "it"
}
res
}
)
which(funky_state == "it")
demog_by_states_clean <- demog_by_states %.>%
filter(.,
state != "KR") %.>%
left_join(.,
state_names_abbr,
by = "state") %.>%
transmute(.,
Year = year,
Abbr = state,
State = full,
Population = population)
demog_by_states_clean
# adding more information about the longitude and latitude
# some information about the map of us
us_states_long_lat <- us_map(region = "states") %.>%
transmute(.,
State = full, Abbr = abbr,
X = x, Y = y,
Group = group, Order = order, Piece = piece, Hole = hole, FIPS = fips)
unique(demog_by_states_clean$State)[unique(demog_by_states_clean$State)%nin%unique(us_states_long_lat$State)]
demog_by_states_annually <- demog_by_states_clean %.>%
left_join(.,
us_states_long_lat,
by = c("State", "Abbr"))
# which states present in the location data are not present in the incidence data?
state_to_filter <- unique(demog_by_states_annually$State)[unique(demog_by_states_annually$State) %nin%
unique(complete_mumps_by_states_annual$State)]
clean_demog_by_states_annually <- demog_by_states_annually %.>%
filter(., State != state_to_filter)
time_to_filter <- min(demog_by_states_annually$Year)
mumps_demog_geog_annual <- complete_mumps_by_states_annual %.>%
filter(.,
Year > time_to_filter-1) %.>%
left_join(.,
clean_demog_by_states_annually,
by = c("State", "Year")) %.>%
mutate(., Incidence = (Cases/Population)*1e5)
# trim the weekly data for fitting and anlysis
mumps_inc_data_weekly <- complete_mumps_us_weekly %.>%
filter(.,
Date > ('1967-12-23')) %.>%
mutate(.,
# define a time variable embrace time period of the covariates
Year = ((as.numeric(difftime(Date, min(Date), units = "weeks"))-1)/52 + 1967)
)
mumps_demog_geog_annual
time_to_filter
complete_mumps_us_annual
# Depends on preprocess tycho_data
# plots aggregated over states
complete_mumps_us_annual %.>%
ggplot(., aes(x = Year, y = Cases)) +
geom_line(size = 1.2) +
project_theme
complete_mumps_us_weekly %.>%
ggplot(., aes(x = Date, y = Cases)) +
geom_line(size = 1) +
project_theme
complete_mumps_us_weekly
complete_mumps_us_annual
complete_mumps_us_weekly %.>%
ggplot(., aes(x = Date, y = Cases)) +
geom_line(size = 1) +
project_theme
mmwr_mumps_us_annual <- mumps_inc_data %.>%
gather(., key = "ac", value = "Cases", -Year) %.>%
group_by(., Year) %.>%
summarise(., Cases = distinct_na_sum(Cases))
mmwr_mumps_us_annual
mumps_inc_data_weekly
mumps_demog_geog_annual
save(mumps_demog_geog_annual, file = "../processed_data/mumps_demog_geog_annual.rds")
# Depends on preprocess tycho_data
# plots aggregated over states
complete_mumps_us_annual %.>%
ggplot(., aes(x = Year, y = Cases)) +
geom_line(size = 1.2) +
project_theme
# Depends on preprocess tycho_data
# plots aggregated over states
complete_mumps_us_annual %.>%
ggplot(., aes(x = Year, y = Cases)) +
geom_line(size = 1.2) +
project_theme
complete_mumps_us_weekly %.>%
ggplot(., aes(x = Date, y = Cases)) +
geom_line(size = 1) +
project_theme
map_mumps <- function(Year, fill_var) {
# generate a quosure type variables
enquo_fill_var <- enquo(fill_var)
mumps_snap_shot <- mumps_demog_geog_annual %.>%
filter(.,
Year == Year)
#browser()
# depends on the preprocess_tycho_data.R
mumps_snap_shot %.>%
ggplot(.,
aes(x = X, y = Y, group = Group)) +
geom_polygon(aes(fill = !!enquo_fill_var)) +
geom_path()+
labs(x = "", y = "",
fill = expression(Cases~per~10^5))+
annotate(geom = "text", x = 0.5e6, y = 0.6e6,
label = paste0("bold(Year:", Year,")"),
parse = TRUE, size = 6)+
scale_fill_gradient(low = "yellow", high = "red")+
project_theme +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = c(0.93, 0.2))
}
map_mumps(Year = 1986, fill_var = Incidence)
map_mumps(Year = 1985, fill_var = Incidence)
map_mumps(Year = 1987, fill_var = Incidence)
mmwr_mumps_us_annual
mumps_demog_geog_annual
map_mumps <- function(Year, fill_var) {
browser()
# generate a quosure type variables
enquo_fill_var <- enquo(fill_var)
mumps_snap_shot <- mumps_demog_geog_annual %.>%
filter(.,
Year == Year)
#browser()
# depends on the preprocess_tycho_data.R
mumps_snap_shot %.>%
ggplot(.,
aes(x = X, y = Y, group = Group)) +
geom_polygon(aes(fill = !!enquo_fill_var)) +
geom_path()+
labs(x = "", y = "",
fill = expression(Cases~per~10^5))+
annotate(geom = "text", x = 0.5e6, y = 0.6e6,
label = paste0("bold(Year:", Year,")"),
parse = TRUE, size = 6)+
scale_fill_gradient(low = "yellow", high = "red")+
project_theme +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.lines = element_blank(),
legend.position = c(0.93, 0.2))
}
map_mumps(Year = 1987, fill_var = Incidence)
Year
mumps_demog_geog_annual
mumps_demog_geog_annual %.>%
filter(.,
Year == Year)
Year
mumps_demog_geog_annual %.>%
filter(.,
Year == Year)
mumps_demog_geog_annual %.>%
filter(.,
Year == 1987)
map_mumps <- function(Year, fill_var) {
browser()
# generate a quosure type variables
enquo_fill_var <- enquo(fill_var)
mumps_snap_shot <- mumps_demog_geog_annual %.>%
filter(.,
Year == Year)
#browser()
# depends on the preprocess_tycho_data.R
mumps_snap_shot %.>%
ggplot(.,
aes(x = X, y = Y, group = Group)) +
geom_polygon(aes(fill = !!enquo_fill_var)) +
geom_path()+
labs(x = "", y = "",
fill = expression(Cases~per~10^5))+
annotate(geom = "text", x = 0.5e6, y = 0.6e6,
label = paste0("bold(Year:", Year,")"),
parse = TRUE, size = 6)+
scale_fill_gradient(low = "yellow", high = "red")+
project_theme +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.lines = element_blank(),
legend.position = c(0.93, 0.2))
}
map_mumps(Year = 1987, fill_var = Incidence)
# generate a quosure type variables
enquo_fill_var <- enquo(fill_var)
enquo_fill_var
mumps_demog_geog_annual %.>%
filter(.,
Year == Year)
Year
mumps_demog_geog_annual %.>%
filter(.,
Year == Year)
Year
mumps_demog_geog_annual %.>%
filter(., Year == Year)
mumps_demog_geog_annual
map_mumps <- function(Year, fill_var,
data = mumps_demog_geog_annual) {
browser()
# generate a quosure type variables
enquo_fill_var <- enquo(fill_var)
mumps_snap_shot <- data %.>%
filter(., Year == Year)
#browser()
# depends on the preprocess_tycho_data.R
mumps_snap_shot %.>%
ggplot(.,
aes(x = X, y = Y, group = Group)) +
geom_polygon(aes(fill = !!enquo_fill_var)) +
geom_path()+
labs(x = "", y = "",
fill = expression(Cases~per~10^5))+
annotate(geom = "text", x = 0.5e6, y = 0.6e6,
label = paste0("bold(Year:", Year,")"),
parse = TRUE, size = 6)+
scale_fill_gradient(low = "yellow", high = "red")+
project_theme +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.lines = element_blank(),
legend.position = c(0.93, 0.2))
}
map_mumps <- function(Year, fill_var,
data = mumps_demog_geog_annual) {
browser()
# generate a quosure type variables
enquo_fill_var <- enquo(fill_var)
mumps_snap_shot <- data %.>%
filter(., Year == Year)
#browser()
# depends on the preprocess_tycho_data.R
mumps_snap_shot %.>%
ggplot(.,
aes(x = X, y = Y, group = Group)) +
geom_polygon(aes(fill = !!enquo_fill_var)) +
geom_path()+
labs(x = "", y = "",
fill = expression(Cases~per~10^5))+
annotate(geom = "text", x = 0.5e6, y = 0.6e6,
label = paste0("bold(Year:", Year,")"),
parse = TRUE, size = 6)+
scale_fill_gradient(low = "yellow", high = "red")+
project_theme +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.lines = element_blank(),
legend.position = c(0.93, 0.2))
}
map_mumps(Year = 1987, fill_var = Incidence)
# generate a quosure type variables
enquo_fill_var <- enquo(fill_var)
data
data %.>%
filter(.,
Year == Year)
data %.>%
filter(.,
Year == 1987)
source("./demog_data_5ac.R")
source('~/Documents/GitHub/mumps2021/process_raw_data/src_process_data.R', echo=TRUE)
source('~/Documents/GitHub/mumps2021/process_raw_data/src_process_data.R', echo=TRUE)
source("../00/src.R", chdir = TRUE)
